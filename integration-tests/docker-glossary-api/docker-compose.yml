
services:
    elasticsearch:
        build:
            # Point to the root of the project.
            context: ../../
            # This path is relative to the context.
            dockerfile: integration-tests/docker-glossary-api/elasticsearch/Dockerfile
        ## All of the ES settings can be set via the environment vars.
        environment:
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms750m -Xmx750m
        ## These exposed ports are for debugging only. .NET +
        ## Docker + MacOS == bad scene. (.NET always wants to
        ## use the hosts name, and on a mac that is actually
        ## a virtual machine, and not on the same network.)
        ports:
            - "9200:9200"
            - "9300:9300"
        networks:
            glossaryapi:
                aliases:
                    - elasticsearch

    api:
        build:
            ## We need the context of our build to be the root of the
            ## project, which is where our code lives.
            context: ../../
            ## This path is relative to the context. Fun, eh?
            dockerfile: integration-tests/docker-glossary-api/api/Dockerfile
        volumes:
            # Project root
            - ../..:/app
            # Integration configuration files we don't want in the source tree.
            - ../../integration-tests/docker-glossary-api/api/runtime/appsettings.inttest.json:/app/src/NCI.OCPL.Api.Glossary/appsettings.inttest.json
            - ../../integration-tests/docker-glossary-api/api/runtime/hosting.json:/app/src/NCI.OCPL.Api.Glossary/hosting.json
            # Use the user's existing GitHub credentials
            - ~/.nuget/NuGet/NuGet.Config:/root/.nuget/NuGet/NuGet.Config
        ports:
            # Lets make it one more than the default aspnetcore app
            - "5000:5000"
        ## NOTE: This does NOT mean that this machine will wait
        ## for elasticsearch to be running, just that the
        ## elasticsearch container should be running first.
        networks:
            glossaryapi:
                aliases:
                    - api
        depends_on:
            - elasticsearch

    ## Commenting out the test container as there seem to be some
    ## performance issues with Karate + API + ES running in docker.
    # test-container:
    #     image: openjdk:11
    #     volumes:
    #         - ..:/usr/src/app
    #     environment:
    #            - "ELASTIC_SEARCH_HOST=http://elasticsearch:9200"
    #            - "KARATE_APIHOST=http://api:5000"
    #     working_dir: /usr/src/app
    #     command: /usr/src/app/bin/run-integration-tests.sh
    #     ## NOTE: This does NOT mean that this machine will wait
    #     ## for elasticsearch to be running, just that the
    #     ## elasticsearch container should be running first.
    #     networks:
    #         glossaryapi:
    #             aliases:
    #                 - tester
    #     depends_on:
    #         - elasticsearch
    #         - api

networks:
  glossaryapi: